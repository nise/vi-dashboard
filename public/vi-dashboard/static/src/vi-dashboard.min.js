var mainColor = "#5f89ad";

function pivotDimensions(obj, first, second) { var tmp = obj.dim[first]; obj.dim[first] = obj.dim[second]; obj.dim[second] = tmp; tmp = obj.keys[first]; obj.keys[first] = obj.keys[second]; obj.keys[second] = tmp; tmp = obj.labels[first]; obj.labels[first] = obj.labels[second]; obj.labels[second] = tmp; for (var i = 0; i < obj.filters.length; i++) { if (obj.filters[i].indepVar === obj.dim[first]) { obj.filters[i].colors = d3.scale.ordinal().domain([0]).range([mainColor]) } else if (obj.filters[i].indepVar === obj.dim[second]) { obj.filters[i].colors = d3.scale.ordinal().domain(obj.keys[second]).range(color_range) } else { obj.filters[i].colors = d3.scale.ordinal().domain([0]).range([mainColor]) } } } 
function addFilterChart(obj, ndx) { var dimension = ndx.dimension(function (d) { return d[obj.indepVar] }), group = dimension.group().reduceSum(function (d) { return +d[obj.depVar] }), margins = obj.margins === undefined ? { top: 0, right: 5, bottom: 20, left: 2 } : obj.margins, colors = obj.colors === undefined ? filterSingleColors : obj.colors, chart = undefined; switch (obj.chartType) { case "rowChart": chart = dc.rowChart(obj.selector); chart.xAxis().ticks(4); chart.margins(margins).height(filterChartHeight); break; case "pieChart": chart = dc.pieChart(obj.selector); chart.innerRadius(20).height(filterChartHeight - 30); break }chart.dimension(dimension).group(group).colors(colors).title(function (p) { return obj.indepVar.charAt(0).toUpperCase() + obj.indepVar.slice(1, obj.indepVar.length) + ": " + p.key + "\n" + "Value: " + p.value }).label(function (d) { return obj.keys[d.key] || d.key }); observer.register(chart) } function Observer() { this.charts = []; this.register = function (chart) { this.charts.push(chart) }; this.resetCharts = function () { for (var i = 0; i < this.charts.length; i++) { this.charts[i].filterAll() } dc.redrawAll() } } 

function select_filter(obj, select_all) {
    var sel = [], out = "", name = obj.selector.replace(/#/g, "") + "-group", yAxisLabel = "views"; console.log("select_filter - name: ", name); select_all = select_all === undefined || null ? false : select_all; console.log("select_filter - select_all: ", select_all); $.each(obj.items, function (i, val) { var label = obj.labels === undefined ? obj.items[i] : obj.labels[i]; sel = ["<label>", '<input type="' + (obj.type === "radio" ? "radio" : "checkbox") + '" name="' + name + '" value="' + obj.items[i] + '" ' + (i === 0 || select_all ? "checked" : "") + " />", label, "</label>", "<br />"]; out += sel.join("") }); console.log("select_filter - out: ", out); $(obj.selector).html($(out)); lastSelected[obj.dim] = $("[name='" + name + "']:checked").val();
    console.log("select_filter - lastSelected[obj.dim] 1: ", lastSelected[obj.dim]);
    let preValues = [];
    $.each($("input[name='" + name + "']:checked"), function () {
        preValues.push($(this).val());
    });
    lastSelected[obj.dim] = preValues.toString();
    console.log("select_filter - lastSelected[obj.dim] 1b: ", lastSelected[obj.dim]); $(document).on("click", '[name="' + name + '"]', function () {
        if (obj.type === "radio" && lastSelected[obj.dim] != $(this).val() && typeof lastSelected[obj.dim] != "undefined") {
            lastSelected[obj.dim] = $(this).val();
            obj.dim.third = 2;
            yAxisLabel = obj.dim === "scope" ? obj.ylabel[obj.items.indexOf($(this).val())] : yAxisLabel; loadData(obj, lastSelected, yAxisLabel)
        } else if (obj.type === "checkbox") { var values = []; $.each($("input[name='" + name + "']:checked"), function () { values.push($(this).val()) }); lastSelected[obj.dim] = values.toString(); console.log("lastSelected CHECKBOX: ", lastSelected); loadData(obj, lastSelected, yAxisLabel) }
    })
}

function select_filter2(obj, select_all) {
    var sel = [], out = "", name = obj.selector.replace(/#/g, "") + "-group", yAxisLabel = "views"; console.log("select_filter - name: ", name); select_all = select_all === undefined || null ? false : select_all; console.log("select_filter - select_all: ", select_all); $.each(obj.items, function (i, val) { var label = obj.labels === undefined ? obj.items[i] : obj.labels[i]; sel = ["<label>", '<input type="' + (obj.type === "radio" ? "radio" : "checkbox") + '" name="' + name + '" value="' + obj.items[i] + '" ' + (i === 0 || select_all ? "checked" : "") + " />", label, "</label>", "<br />"]; out += sel.join("") }); console.log("select_filter - out: ", out); $(obj.selector).html($(out)); lastSelected[obj.dim] = $("[name='" + name + "']:checked").val();
    console.log("select_filter2 - lastSelected[obj.dim] 1: ", lastSelected[obj.dim]);
    let preValues = [];
    $.each($("input[name='" + name + "']:checked"), function () {
        preValues.push($(this).val());
    });
    lastSelected[obj.dim] = preValues.toString();
    console.log("select_filter2 - lastSelected[obj.dim] 1b: ", lastSelected[obj.dim]); $(document).on("click", '[name="' + name + '"]', function () {
        if (obj.type === "radio" && lastSelected[obj.dim] != $(this).val() && typeof lastSelected[obj.dim] != "undefined") {
            lastSelected[obj.dim] = $(this).val();
            obj.dim.third = 2;
            yAxisLabel = obj.dim === "scope" ? obj.ylabel[obj.items.indexOf($(this).val())] : yAxisLabel; loadData2(obj, lastSelected, yAxisLabel)
        } else if (obj.type === "checkbox") { var values = []; $.each($("input[name='" + name + "']:checked"), function () { values.push($(this).val()) }); lastSelected[obj.dim] = values.toString(); console.log("lastSelected CHECKBOX: ", lastSelected); loadData2(obj, lastSelected, yAxisLabel) }
    })
}

$(document).ready(function () { var i18init = i18next.use(i18nextXHRBackend).init({ lng: "en", fallbackLng: "en", debug: true, ns: ["special", "common"], defaultNS: "special", backend: { loadPath: "/static/locales/{{lng}}/translation.json", crossDomain: true } }, function (err, t) { $(".title").localize(); $("#mainGroup").localize(); $("#chartPeaks").localize(); $("#chartCordtra").localize() }); jqueryI18next.init(i18init, $, { tName: "t", i18nName: "i18n", handleName: "localize", selectorAttr: "data-i18n", targetAttr: "i18n-target", optionsAttr: "i18n-options", useOptionsAttr: false, parseDefaultValueFromContent: true }) });
