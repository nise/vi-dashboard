<% include layout %>

	<div class="row" id="chartLearnerDashboard">

        <div class="row">

          <!-- row for meta-data (user, sum watched, ...) -->

        </div>
        
    <hr><!-- -------------------------------------------------------------- -->    

        <!-- MAIN -->
        <div class="main-chart col-md-12">

            <div class="row">

                <!-- #1 Time Spent -->
                <div class="col-md-9">
                        <h4 class="title">Zeitaufwand pro Woche je Video (Time Spent)</h4>
                        <div id="chartTimespent" class="row"></div>
                        <div id="help" class="help">
                            <h4><span class="glyphicon glyphicon-question-sign"></span> Help</h4>
                            <div data-i18n="timespent_chart.help.main"></div>
                        </div>
                </div>

                <!-- #2 ... -->
                <div class="col-md-3">
                        <h4 class="title">Zeitaufwand nach Wochentag</h4>
                        <div id="chartWeekdays" class="row"></div>
                        <div id="help" class="help">
                            <h4><span class="glyphicon glyphicon-question-sign"></span> Help</h4>
                            <div data-i18n="weekdays_chart.help.main"></div>
                        </div>
                </div>
            

            </div>

            <hr><!-- -------------------------------------------------------------- -->

            <!-- #3a ... -->
                    <h4 class="title">Eigene Betrachtungen im Vergleich zu anderen Lernenden</h4>
                    <div id="chartSocialpeaks" class="row"></div>
                    <div id="help" class="help">
                        <h4><span class="glyphicon glyphicon-question-sign"></span> Help</h4>
                        <div data-i18n="socialpeaks_chart.help.main"></div>
                    </div>

            <!-- #3b ... -->
                    <h4 class="title"></h4>
                    <div id="chartSocialpeaks2" class="row"></div>
                    <div id="help" class="help">
                        <h4><span class="glyphicon glyphicon-question-sign"></span> Help</h4>
                        <div data-i18n="socialpeaks_chart.help.main"></div>
                    </div>
            <hr>

        </div>

  </div>
  
  <style>
    .x { font: 18px sans-serif; }
    .y { font: 18px sans-serif; }
    .xLabel {font: 12px sans-serif;}
    .yLabel {font: 12px sans-serif;}
    .legend {font: 12px sans-serif;}
  </style>

	<% include scripts %>

	<script>
			const t0 = performance.now();
			var observer = new Observer();

      const video_keys = <%-JSON.stringify(videos, null, '\t') %>;
      // console.log("video_keys: " , video_keys);
      // -> ["e2script_lecture1_improved.mp4", "e2script_lecture2_improved.mp4", "e2script_lecture3_improved.mp4", "e2script_lecture4_improved.mp4", "e2script_lecture5_improved.mp4"]
			const color_range = ['yellow', 'blue', 'purple', 'red', 'orange', 'green', 'black'];
			const filterChartHeight = 150;
		//	const filterSingleColors = d3.scale.ordinal().domain([0]).range(['#e6550d']);
   //   const filterMultiColors = d3.scale.ordinal().domain(context_keys).range(color_range);

      // Colors for Vids
      colors = ["#cd5c5c",  "#007fff",  "#66ff00",  "#4b3621",  "#a9a9a9" ] //, "#f44250", "#41f4dc"];
      //        indianred,  azureblue,  brightgreen, cafenoir     electricblue
      colorsPeaks = ['#ffff00', '#FF0000'];
      //              personal, social
      days = ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"];

			var
					lastSelected = {},
					obj = {}
					;
			obj.dim = { first: 0, second: 1, third: 2 };
			obj.keys = { first: null, second: null, third: null };
			obj.labels = { first: 'Forward moves', second: 'Backward moves', third: 'Context' };
      obj.filters = [];
      console.log("obj: ", obj);

			// init filters, dim, type, items, selector, ylabel, labels
		  // select_filter({ dim: 'video', type: 'radio', items: video_keys, selector: '#video-select' });

			// sg - initial loadData() - object from above
      loadData(obj, { });
        //, group: group_keys[0] });

	/*
	*   Daten laden =============================
	*/
			function loadData(obj, filter) {
					
            console.log("loadDataFunction: ", " obj: ", obj, " filter: ", filter);

            // canvas clearing
          $("#chartTimespent").empty();
          $("#chartWeekdays").empty();
          $("#chartSocialpeaks").empty();
          $("#chartSocialpeaks2").empty();


          // Get the data
          d3.json("/data/learner-dashboard", function (error, res) {
              
            const t1 = performance.now(); 
            d3Timespent(res, filter);
            d3Weekdays(res, filter);
            d3Socialpeaks(res, filter);
            d3Socialpeaks2(res, filter);

            // collect and send performance metrics
            res.metrics.pageload = t1 - t0;
            res.metrics.d3rendering = performance.now() - t1;
            res.metrics.browser = navigator.userAgent.split(' ')[navigator.userAgent.split(' ').length-1].split('/')[0];
            $.ajax({
                type: "POST",
                url: '/log/metrics',
                data: res.metrics,
                dataType: 'json'
            });
          });
        } // end load data

/**
 * =========================== d3 functions ======================================
 */

/**
 *  #1 Time Spent ************************************ 
 */

      function d3Timespent(res, filter) {
        console.log("---TIMESPENT---");
        console.log("res.data.timespent: ", res.data.timespent);
          // 0: {
          //   kw: { v: "e2script_lecture4_improved.mp4", sum: 67.08333333333333 },
          //   id: 48
          //   }

        let the_data = res.data.timespent;

        // Set the dimensions of the canvas / graph
        var margin = { top: 10, right: 50, bottom: 35, left: 80 },
            width = $("#chartTimespent").width() / 1.1  - margin.left - margin.right,
            height = ($("#chartTimespent").width() * .50) / 2.8 - margin.top - margin.bottom,
            barwidth = 3,
            barheight = 10,
            maxX = 53 ;      // Wochen in 2016 nur 52

        // Formatting Minutes to H:M
        var formatTime = d3.time.format("%H:%M"),
        formatMinutes = function(d) { return formatTime(new Date(2019, 0, 1, 0, d)); };

        // Set the ranges
        var x = d3.scale.linear().range([0, width]);
        var y = d3.scale.linear().range([height, 0]);

        // Define the axes
        var xAxis = d3.svg.axis().scale(x)
            .orient("bottom").ticks(53);

        var yAxis = d3.svg.axis().scale(y)
            .orient("left") //.ticks(8) //.tickSize()
            .tickFormat(formatMinutes);

        /**
         *  DATA PREPARATION****************************
         **/

        // 1. sortiertes Array mit KWs
        let dataset = [];
        the_data.forEach(function (d, i) {
          if( d != null ) {
            let temp = { kw: d._id };
            dataset.push( temp );
          }  
        });
        console.log("timespent: data präpariert: ", dataset);
        // 0 : {kw: 44}
        // 1 : {kw: 47}

        // 2. zu jeder KW ...
        dataset.forEach(function (d, i) {
          // ... die Videos + Playbacktime
          for(let j = 0; j < the_data[i].kw.length; j++) {
            // Video-Objekt erstellen
            let currentVidName = the_data[i].kw[j].v;
            // in vidArray der KW pushen
            d[currentVidName] = the_data[i].kw[j].sum;
          }
        })
        console.log("timespent: dataset präpariert 2! : ", dataset);
        // 0 : {   kw: 44, 
        //         e2script_lecture2_improved.mp4: 2737, 
        //         e2script_lecture3_improved.mp4: 3341  }

        // Stack Layout - // Transpose the data into layers
        var stackData = d3.layout.stack()(video_keys.map(function(vid) {
          return dataset.map(function(d) {
            if( !d[vid] ) {
              return { x: d.kw, y: 0 };
            } else {
            return { x: d.kw, y: +d[vid]} };
          })
        }));
        console.log("timespent: stackData: ", stackData);
        // 0: Array(10)
        // 0: {x: 48, y: 0, y0: 0}
        // 1: {x: 47, y: 0, y0: 0}
        // 2: {x: 44, y: 0.0011111111111111111, y0: 0}
        // 3: {x: 50, y: 0.04777777777777778, y0: 0}
        // 4: {x: 46, y: 0.5288888888888889, y0: 0}
        // 5: {x: 45, y: 0.15388888888888888, y0: 0}
        // 6: {x: 8, y: 0.015277777777777777, y0: 0}
        // 7: {x: 2, y: 0, y0: 0}
        // 8: {x: 51, y: 0, y0: 0}
        // 9: {x: 49, y: 0, y0: 0}

        // 1: Array(10)
        // 0: {x: 48, y: 0, y0: 0}
        // 1: {x: 47, y: 0, y0: 0}
        // 2: {x: 44, y: 0.0011111111111111111, y0: 0.0011111111111111111}
        // 3: {x: 50, y: 0, y0: 0.04777777777777778}
        // 4: {x: 46, y: 0.25027777777777777, y0: 0.5288888888888889}
        // 5: {x: 45, y: 1.4225, y0: 0.15388888888888888}
        // 6: {x: 8, y: 0, y0: 0.015277777777777777}
        // 7: {x: 2, y: 0, y0: 0}
        // 8: {x: 51, y: 0.2613888888888889, y0: 0}
        // 9: {x: 49, y: 0, y0: 0}               

        /**
         *  CANVAS ******************************
         **/

        // Adds the svg canvas
        var svg = d3.select('#chartTimespent')
            .append("svg")
            .attr("width", width + margin.left + margin.right + 50) // +50 Puffer für Legende
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

        // Scale the range of the data in minutes
        // x.domain(stackData[0].map( function(d) { return d.x; } ) );
        x.domain([0, maxX]);
        y.domain([0, d3.max(stackData, function(d) { 
                            return d3.max(d, function(d) { 
                                              return d.y0 + d.y; })
                            })
                  ]);

        // Create groups for each series, rects for each segment 
        var groups = svg.selectAll("g.playback")
          .data(stackData)
          .enter().append("g")
          .attr("class", "playback")
          .style("fill", function(d, i) { return colors[i]; });

        // Tooltip
        var tip = d3.tip()
          .attr('class', 'd3-tip')
          .direction('se')
          .offset([-10, 0])
          .html(function (d, i) {
            var hours = parseInt(d.y / 60);
            var minutes = parseInt(d.y % 60);
            return arr = [
              "Woche: " + d.x,
              "Betrachtungszeit: " + hours + "h" + minutes +"m"
            ].join('<br>');
          });

        var rect = groups.selectAll("rect")
          .data(function(d) { return d; })
          .enter()
          .append("rect")
          .attr("x", function(d) { return x(d.x) - ( width / maxX / 2 ) ; })
          .attr("y", function(d) { return y(d.y0 + d.y); })
          .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
          .attr("width", ( width / maxX ) -1 )
          .on('mouseover', tip.show)
          .on('mouseout', tip.hide);
          ;

        /**
         *  BUILD AXIS
         **/
        // Add the X Axis
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(" + 0 + "," + height + ")")
            .call(xAxis);
        // Add the Y Axis
        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);
        // Axis label
        svg.append("text") // y
            .attr("class", "yLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (-50) + "," + (height / 2) + ")rotate(-90)")  // 
            .text('Zeitaufwand (Stunden:Minuten)');
        svg.append("text") // x
            .attr("class", "xLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (width / 2) + "," + (height + margin.bottom - 3) + ")") 
            .text('Kalenderwoche');

        // Title

        // Draw legend
        var legend = svg.selectAll(".legend")
          .data(colors)
          .enter().append("g")
          .attr("class", "legend")
          .attr("transform", function(d, i) { return "translate(30," + i * 19 + ")"; });
        legend.append("rect")
          .attr("x", width - 18)
          .attr("width", 18)
          .attr("height", 18)
          .style("fill", function(d, i) {return colors.slice()[i];});   // .reverse()
        legend.append("text")
          .attr("x", width + 5)
          .attr("y", 9)
          .attr("dy", ".35em")
          .style("text-anchor", "start")
          .text(function(d, i) { 
            switch (i) {
              case 0: return "Video 1";
              case 1: return "Video 2";
              case 2: return "Video 3";
              case 3: return "Video 4";
              case 4: return "Video 5";
            }
          });

        svg.call(tip);

        console.log("*** finished timespent ***");

      } // end d3Timespent

/**
 *  #2 Weekdays ************************************ 
 */

      function d3Weekdays(res, filter) {
        console.log("---WEEKDAYS---");
        console.log("res.data.weekdays: ", res.data.weekdays);
        // [ { d: 6, sum: 20 },
        //   { d: 1, sum: 5675 },
        //   { d: 5, sum: 3458 },
        //   { d: 2, sum: 10809 },
        //   { d: 4, sum: 5483 } ] }

        let the_data = res.data.weekdays;

        // Set the dimensions of the canvas / graph
        var margin = { top: 10, right: 10, bottom: 35, left: 70 },
            width = $("#chartWeekdays").width() - margin.left - margin.right,
            //height = ($("#chartWeekdays").width() * .50) / 2.8 - margin.top - margin.bottom;
            height = 210;
            barheight = height / 8 / 1.2

        // Set the ranges
        var x = d3.scale.linear()
            .domain([0, d3.max( the_data, function(d) { return d.sum; } )])
            .range([0, width]);
        var y = d3.scale.linear()
            .domain([0, 7]) // Index Days
            .range([0, height]);

        // Define the axes
        var xAxis = d3.svg.axis().scale(x)
            .orient("bottom") //.ticks(10);

        var yAxis = d3.svg.axis().scale(y)
            .orient("left") //.ticks(8) //.tickSize()
            .tickFormat( function (d) { return days[d] ; });        

        /**
         *  CANVAS ******************************
         **/

        // Adds the svg canvas
        var svg = d3.select('#chartWeekdays')
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

        // Create Rects
        svg.selectAll("bar")
          .data(the_data)
          .enter().append("rect")
          .attr("x", 0 )
          .attr("width", function (d) { return x(d.sum); })
          // Sourceformat MongoDb DayOfWeek: 1 So, 2 Mo, ...
          .attr("y", function(d) { return (y(d.d -1) - (barheight / 2))  ; })
          .attr("height", barheight )
          .style("fill", "steelblue");  

        /**
         *  BUILD AXIS
         **/
        // Add the X Axis
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(" + 0 + "," + (height) + ")")
            .call(xAxis);
        // Add the Y Axis
        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);
        // Axis label
            // no label for y-axis needed
        svg.append("text") // x
            .attr("class", "xLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (width / 2) + "," + (height + margin.bottom - 5) + ")") 
            .text('Zeitaufwand (Stunden) ');

        //svg.call(tip);

        console.log("*** finished weekdays ***");

        } // end d3Weekdays

/**
 *  #3 Social Peaks ************************************ 
 */

        function d3Socialpeaks(res, filter) {

        console.log("---PEAKS#1---");
        console.log("res.data.socialpeaks: ", res.data.socialpeaks);
        // 0: {v: "e2script_lecture5_improved.mp4", sec: 0, count: 94}
        // 1: {v: "e2script_lecture5_improved.mp4", sec: 1, count: 20}
        // 2: {v: "e2script_lecture5_improved.mp4", sec: 2, count: 23}
        // 3: {v: "e2script_lecture5_improved.mp4", sec: 4, count: 22}
        // ...

        let the_data_social = res.data.socialpeaks;
        let the_data_personal = res.data.personalpeaks;
        // let videometa = res.videometa;
        // console.log("videoMeta: ", videometa);
        //   { e2script_kickoff.mp4: "0:49:02"
        //     e2script_lecture1_improved.mp4: "0:46:31"
        //     e2script_lecture2_improved.mp4: "0:49:58"
        //     e2script_lecture3_improved.mp4: "0:53:10"
        //     e2script_lecture4_improved.mp4: "0:43:48"
        //     e2script_lecture5_improved.mp4: "0:42:58" }
        let videolength = res.videometa[the_data_social[0].v];
        console.log("videolength: ", videolength);

        // time parsing videolength
        var formatTimeInput = d3.time.format("%-I:%M:%S");
        var maxX_videolength = formatTimeInput.parse(videolength);
        console.log("videolength_date: ", maxX_videolength);
        var getSeconds = d3.time.format("%S");
        var getMinutes = d3.time.format("%M");
        var seconds = getSeconds(maxX_videolength);
        var minutes = getMinutes(maxX_videolength);
        console.log("Minutes, Seconds ", minutes, " ", seconds);
        var videolengthDecimal = parseInt(seconds) + (minutes * 60);
        console.log("videolength_decimal: ", videolengthDecimal);

        // Set the dimensions of the canvas / graph
        var margin = { top: 30, right: 10, bottom: 35, left: 60 },
            width = $("#chartSocialpeaks").width() * .95  - margin.left - margin.right,
            height = ($("#chartSocialpeaks").width() * .50) / 3.5 - margin.top - margin.bottom,
            barwidth = 3,
            barheight = 10,
            maxX = videolengthDecimal;
          console.log("maxX: ", maxX);

        var formatTime = d3.time.format("%M:%S"),
            formatMinutes = function (d) { return formatTime(new Date(2012, 0, 1, 0, 0, d)); };

        // Set the ranges
        var x = d3.scale.linear()
          .domain([0, maxX])
          .range([0, width]);
        var y = d3.scale.linear()
          .domain([0, 100])  // maxY static, for cutting extreme values
          .range([height, 0]);

        // Define the axes
        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(formatMinutes);
        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(10);

        /**
         *  CANVAS ******************************
         **/

        // Adds the svg canvas and append a group (g)
        var svg = d3.select('#chartSocialpeaks')
            .append("svg")
            .attr("width", width  + margin.left + margin.right ) 
            .attr("height", height + margin.top + margin.bottom)
            ;

        // Tooltip
        var tip = d3.tip()
            .attr('class', 'd3-tip')
            .direction('se')
            .offset([-10, 0])
            .html(function (d, i) {
              var minutes = parseInt(d.sec / 60);
              var seconds = d.sec % 60;
              return arr = [
                "Zeit: " + minutes + ":" + seconds,
                "Anzahl: " + d.count
              ].join('<br>');
            });            

        // group for social rects
        var socialGroup = svg.append("g")
            .attr("id", "gSocial_rects")
            .attr("transform","translate(" + margin.left + "," + margin.top + ")")
            ;
        var socialBars = socialGroup.selectAll("rect")
            .data(the_data_social)
            .enter() // data to document
            .append("rect") // data becomes tag rect's
            .attr("class", "social_rects")
            .attr("x", function(d) { return x(d.sec) - ( width / maxX / 2 ) ; })
            .attr("y", function(d) { return y(d.count); })
            .attr("height", function(d) { return y(0) - y(d.count); })
            .attr("width", ( width / maxX ) )
            .attr("fill", colorsPeaks[1])
            .on('mouseover', tip.show)
            .on('mouseout', tip.hide)
            ;

        // group for personal rects
        var personalGroup = svg.append("g")
            .attr("id", "gPersonal_rects")
            .attr("transform","translate(" + margin.left + "," + margin.top + ")")
            ;
        var personalBars = personalGroup.selectAll("rect")
            .data(the_data_personal)
            .enter() // data to document
            .append("rect") // data becomes tag rect's 
            .attr("class", "personal_rects")
            .attr("x", function(d) { return x(d.sec) - ( width / maxX / 2 ) ; })
            .attr("y", function(d) { return y(d.count); })
            .attr("height", function(d) { return y(0) - y(d.count); })
            .attr("width", ( width / maxX ) )
            .attr("fill", colorsPeaks[0])
            ;

        /**
         *  BUILD AXIS ***********
         **/
        // Add the X Axis
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(" + margin.left + "," + (height + margin.top) + ")")
            .call(xAxis);
        // Add the Y Axis
        svg.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")") // Push left for 00:00 log
            .call(yAxis);
        // Axis label
        svg.append("text") // y
            .attr("class", "yLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (-30) + "," + (height / 2) + ")rotate(-90)")  // 
            .text('Anzahl Betrachtungen');
        svg.append("text") // x
            .attr("class", "xLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (width / 2) + "," + (height + margin.top + 30) + ")") 
            .text('Abspielzeit (Minuten:Sekunden)');

        // Title - name of the videofile
        svg.append("text")
            .attr("class", "chart-title")
            .attr("x", (width / 2))
            .attr("y", 0 + (margin.top))
            .attr("text-anchor", "middle")
            .text([
                "Video: " + the_data_social[0].v
            ].join(''))
            ;

        // Draw legend - Symbols & Text
        var legend = svg.selectAll(".legend")
          .data("1")
          .enter().append("g")
          .attr("class", "legend")
          ;
        legend.append("rect")
          .attr("x", width - 225)
          .attr("y", 2)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", colorsPeaks[1])
          ;
        legend.append("text")
          .attr("class", "legend")
          .attr("x", width - 200)
          .attr("y", 5)
          .attr("dy", ".40em")
          .style("text-anchor", "start")
          .text("Betrachtungen anderer")
          ;
        legend.append("rect")
          .attr("x", width - 225)
          .attr("y", 20)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", colorsPeaks[0])
          ;
        legend.append("text")
          .attr("class", "legend")
          .attr("x", width - 200)
          .attr("y", 25)
          .attr("dy", ".40em")
          .style("text-anchor", "start")
          .text("Betrachtungen persönlich")
          ;

        svg.call(tip);

        console.log("*** finished socialpeaks ***");

        } // end d3Socialpeaks #1


/**
 *  #3 Peaks #2 ************************************ 
 */

        function d3Socialpeaks2(res, filter) {
        
        console.log("---PEAKS#2---");
        console.log("res.data.socialpeaks: ", res.data.socialpeaks2);
        // 0: {v: "e2script_lecture5_improved.mp4", sec: 0, count: 94}
        // 1: {v: "e2script_lecture5_improved.mp4", sec: 1, count: 20}
        // 2: {v: "e2script_lecture5_improved.mp4", sec: 2, count: 23}
        // 3: {v: "e2script_lecture5_improved.mp4", sec: 4, count: 22}
        // ...

        let the_data_social = res.data.socialpeaks2;
        let the_data_personal = res.data.personalpeaks2;
        // let videometa = res.videometa;
        // console.log("videoMeta: ", videometa);
        //   { e2script_kickoff.mp4: "0:49:02"
        //     e2script_lecture1_improved.mp4: "0:46:31"
        //     e2script_lecture2_improved.mp4: "0:49:58"
        //     e2script_lecture3_improved.mp4: "0:53:10"
        //     e2script_lecture4_improved.mp4: "0:43:48"
        //     e2script_lecture5_improved.mp4: "0:42:58" }
        let videolength = res.videometa[the_data_social[0].v];
        console.log("videolength: ", videolength);

        // time parsing videolength
        var formatTimeInput = d3.time.format("%-I:%M:%S");
        var maxX_videolength = formatTimeInput.parse(videolength);
        console.log("videolength_date: ", maxX_videolength);
        var getSeconds = d3.time.format("%S");
        var getMinutes = d3.time.format("%M");
        var seconds = getSeconds(maxX_videolength);
        var minutes = getMinutes(maxX_videolength);
        console.log("Minutes, Seconds ", minutes, " ", seconds);
        var videolengthDecimal = parseInt(seconds) + (minutes * 60);
        console.log("videolength_decimal: ", videolengthDecimal);

        // Set the dimensions of the canvas / graph
        var margin = { top: 30, right: 10, bottom: 35, left: 60 },
            width = $("#chartSocialpeaks2").width() * .95  - margin.left - margin.right,
            height = ($("#chartSocialpeaks2").width() * .50) / 3.5 - margin.top - margin.bottom,
            barwidth = 3,
            barheight = 10,
            maxX = videolengthDecimal;
          console.log("maxX: ", maxX);

        var formatTime = d3.time.format("%M:%S"),
            formatMinutes = function (d) { return formatTime(new Date(2012, 0, 1, 0, 0, d)); };

        // Set the ranges
        var x = d3.scale.linear()
          .domain([0, maxX])
          .range([0, width]);
        var y = d3.scale.linear()
          .domain([0, 100])  // maxY static, for cutting extreme values
          .range([height, 0]);

        // Define the axes
        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(formatMinutes);
        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(10);

        /**
         *  CANVAS ******************************
         **/

        // Adds the svg canvas and append a group (g)
        var svg = d3.select('#chartSocialpeaks2')
            .append("svg")
            .attr("width", width  + margin.left + margin.right ) 
            .attr("height", height + margin.top + margin.bottom)
            ;

        // Tooltip
        var tip = d3.tip()
          .attr('class', 'd3-tip')
          .direction('se')
          .offset([-10, 0])
          .html(function (d, i) {
            var minutes = parseInt(d.sec / 60);
            var seconds = d.sec % 60;
            return arr = [
              "Zeit: " + minutes + ":" + seconds,
              "Anzahl: " + d.count
            ].join('<br>');
          });            

        var socialGroup = svg.append("g")
            .attr("id", "gSocial_rects2")
            .attr("transform","translate(" + margin.left + "," + margin.top + ")")
            ;
        var socialBars = socialGroup.selectAll("rect")
            .data(the_data_social)
            .enter() // data to document
            .append("rect") // data becomes tag rect's
            .attr("class", "social_rects2")
            .attr("x", function(d) { return x(d.sec) - ( width / maxX / 2 ) ; })
            .attr("y", function(d) { return y(d.count); })
            .attr("height", function(d) { return y(0) - y(d.count); })
            .attr("width", ( width / maxX ) )
            .attr("fill", "red")
            .on('mouseover', tip.show)
            .on('mouseout', tip.hide)
            ;

        var personalGroup = svg.append("g")
            .attr("id", "gPersonal_rects2")
            .attr("transform","translate(" + margin.left + "," + margin.top + ")")
            ;
        var personalBars = personalGroup.selectAll("rect")
          .data(the_data_personal)
          .enter() // data to document
          .append("rect") // data becomes tag rect's 
          .attr("class", "personal_rects2")
          .attr("x", function(d) { return x(d.sec) - ( width / maxX / 2 ) ; })
          .attr("y", function(d) { return y(d.count); })
          .attr("height", function(d) { return y(0) - y(d.count); })
          .attr("width", ( width / maxX ) )
          .attr("fill", "yellow")

        /**
         *  BUILD AXIS ***********
         **/
        // Add the X Axis
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(" + margin.left + "," + (height + margin.top) + ")")
            .call(xAxis);
        // Add the Y Axis
        svg.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")") // Push left for 00:00 log
            .call(yAxis);
        // Axis label
        svg.append("text") // y
            .attr("class", "yLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (-30) + "," + (height / 2) + ")rotate(-90)")  // 
            .text('Anzahl Betrachtungen');
        svg.append("text") // x
            .attr("class", "xLabel")
            .attr("text-anchor", "middle")
            .attr("transform", "translate(" + (width / 2) + "," + (height + margin.top + 30) + ")") 
            .text('Abspielzeit (Minuten:Sekunden)');

        // Title - name of the videofile
        svg.append("text")
            .attr("class", "chart-title")
            .attr("x", (width / 2))
            .attr("y", 0 + (margin.top))
            .attr("text-anchor", "middle")
            .text([
                "Video: " + the_data_social[0].v
            ].join(''))
            ;

        // Draw legend - Symbols & Text
        var legend = svg.selectAll(".legend")
          .data("1")
          .enter().append("g")
          .attr("class", "legend")
          ;
        legend.append("rect")
          .attr("x", width - 225)
          .attr("y", 2)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", colorsPeaks[1])
          ;
        legend.append("text")
          .attr("class", "legend")
          .attr("x", width - 200)
          .attr("y", 5)
          .attr("dy", ".40em")
          .style("text-anchor", "start")
          .text("Betrachtungen anderer")
          ;
        legend.append("rect")
          .attr("x", width - 225)
          .attr("y", 20)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", colorsPeaks[0])
          ;
        legend.append("text")
          .attr("class", "legend")
          .attr("x", width - 200)
          .attr("y", 25)
          .attr("dy", ".40em")
          .style("text-anchor", "start")
          .text("Betrachtungen persönlich")
          ;

        svg.call(tip);

        console.log("*** finished socialpeaks #2 ***");

        } // end d3Socialpeaks




    </script>

    <% include footer %>