<% include layout %>

	<div class="container" id="chartWorkload">

    <!-- MAIN -->
		<div class="main-chart col-md-11">
			<h3 class="title">Workload</h3>
			<hr>
			<div id="mainChart" class="row"></div>
			<div id="help" class="help">
				<h4><span class="glyphicon glyphicon-question-sign"></span> Help</h4>
				<div data-i18n="workload_chart.help.main"></div>
			</div>
    </div>
    
    <!-- FILTER -->
		<div class="filter-area col-md-1">
				<h4>FILTER <a class="filter-reset" href="javascript:observer.resetCharts();">reset</a></h4>
				<div class="">
						<h5>Groups</h5>
						<div id="group-select"></div>
				</div>
				<div class="" hidden>
						<h5>Interaction Context</h5>
						<div id="context-chart"></div>
				</div>
		</div>

	</div>


	<% include scripts %>

	<script>
			const t0 = performance.now();
			var observer = new Observer();

			const video_keys = <%-JSON.stringify(videos, null, '\t') %>;
			const context_keys = <%-JSON.stringify(context, null, '\t') %>;
			const group_keys = <%-JSON.stringify(groups, null, '\t') %>;
			const color_range = ['yellow', 'blue', 'purple', 'red', 'orange', 'green', 'black'];
			const filterChartHeight = 150;
			const filterSingleColors = d3.scale.ordinal().domain([0]).range(['#e6550d']);
      const filterMultiColors = d3.scale.ordinal().domain(context_keys).range(color_range);

      // Colors for Vids
      colors = ["#ff6600","#ffb380","#003399","#80aff", "#ffcc00"];

			var
					lastSelected = {},
					obj = {}
					;
			obj.dim = { first: 0, second: 1, third: 2 };
			obj.keys = { first: null, second: null, third: context_keys };
			obj.labels = { first: 'Forward moves', second: 'Backward moves', third: 'Context' };
			obj.filters = [];

			// init filters, dim, type, items, selector, ylabel, labels
			select_filter({ dim: 'video', type: 'radio', items: video_keys, selector: '#video-select' });
			select_filter({ dim: 'group', type: 'radio', items: group_keys, selector: '#group-select' });
			//select_filter('scope', 'radio', ['total', 'user', 'group'], '#scope-select', ['views', 'number of users who watched the segment']);

			// sg - initiales loadData - manuelles Objekt von oben
			loadData(obj, { video: video_keys[0], group: group_keys[0] });


	/*
	*
	*/
			function loadData(obj, filter) {
					
					console.log("loadDataFunction: ", " obj: ", obj, " filter: ", filter);
					// aus select_filter ->
					// loadDataFunction:   obj:  Object { dim: "video", 
					//                                    type: "radio", 
					//                                    items: Array[5], 
					//                                    selector: "#video-select" }  
					//                     filter:  Object { video: "e2script_lecture2_improved.mp4", group: "97" }

					// canvas leeren
					$("#mainChart").empty();
					// Set the dimensions of the canvas / graph
					var margin = { top: 30, right: 50, bottom: 35, left: 40 },
							width = $("#mainChart").width() / 1.2  - margin.left - margin.right,
							height = ($("#mainChart").width() * .75) / 3 - margin.top - margin.bottom,
							barwidth = 3,
              barheight = 10,
              maxX = 53 ;      // Wochen in 2016 nur 52

					// Set the ranges
          var x = d3.scale.linear().range([0, width]);
          // .rangeRoundBands([10, width-10], 0.02);
					var y = d3.scale.linear().range([height, 0]);

					// Define the axes
					var xAxis = d3.svg.axis().scale(x)
							.orient("bottom").ticks(53);

					var yAxis = d3.svg.axis().scale(y)
							.orient("left").ticks(10);

            // Get the data
            d3.json("/data/workload/groups/" + filter['group'], function (error, res) {
								var the_data = res.data;
								console.log("the_data: ", the_data);
                const t1 = performance.now(); 

                /**
                 *  ITERATION PER USER****************************
                 **/

                for (var j = 0; j < the_data.users.length; j++) {
                  let user = the_data.users[j]; // aktueller User
                  console.log("USER -> ", user, " ========");

                  // generiere div
                  var div = $('<div></div>')
												.attr('id', 'user' + user)
												.addClass('col-md-9');
                   $("#mainChart").append(div);

									/**
									 *  DATA PREPARATION****************************
									 **/
                  
                  // Aufbau data - für jeden KW-Video-Datensatz des UsersX:
                  console.log("the_data.results.length: ", the_data.results.length); // -> 20
                  let data = [];
                  for (var i = 0; i < the_data.results.length; i++) {
                    data = the_data.results[user];
                  }

                  // 1. sortiertes Array mit KWs
                  let dataset = [];
                  console.log("data.length: ", data.length);
									data.forEach(function (d, i) {
                    if( d != null ) {
                      let temp = { kw: i };
                      dataset.push( temp );
                      console.log("data[i] kw-Arrays: ", i);
                    }  
									});
                  console.log("data präpariert: ", dataset);
                  // 0 : {kw: 44}
                  // 1 : {kw: 47}

                  // zu jeder KW die Videos
                  dataset.forEach(function (d, i) {
                    // für jedes Video der KW
                    for(let j = 0; j < data[d.kw].length; j++) {
                      // Video-Objekt erstellen
                     // let currentVid = { "v": data[d.kw][j].v, "sum": data[d.kw][j].p }
                     let currentVidName = data[d.kw][j].v;
                      // in vidArray der KW pushen
                      d[currentVidName] = data[d.kw][j].p;
                    }
                  })
                  console.log("dataset präpariert 2! : ", dataset);
                  // 0 : {   kw: 44, 
                  //         e2script_lecture2_improved.mp4: 2737, 
                  //         e2script_lecture3_improved.mp4: 3341  }
                  // 1 : {   kw: 47, 
                  //         e2script_lecture4_improved.mp4: 4, 
                  //         e2script_lecture5_improved.mp4: 4 }

                  // Stack Layout - // Transpose the data into layers
                  var stackData = d3.layout.stack()(video_keys.map(function(vid) {
                    return dataset.map(function(d) {
                      if( !d[vid] ) {
                        return { x: d.kw, y: 0 };
                      } else {
                      return { x: d.kw, y: +d[vid]} };
                    })
                  }));
                  console.log("stackData: ", stackData);
                  // für user6
                  // (0) v1
                  // 0 : {x: 44, y: 0, y0: 0}
                  // 1 : {x: 47, y: NaN, y0: 0}
                  // (1) v2
                  // 0 : {x: 44, y: 2737, y0: 0}
                  // 1 : {x: 47, y: 0, y0: 0}
                  // (2) v3
                  // 0:{x: 44, y: 3341, y0: 2737}
                  // 1:{x: 47, y: 0, y0: 0}
                  // (3) v4
                  // 0:{x: 44, y: 0, y0: 6078}
                  // 1:{x: 47, y: 4, y0: 0}
                  // (4) v5
                  // 0:{x: 44, y: 0, y0: 6078}
                  // 1:{x: 47, y: 4, y0: 4}                  

									/**
									 *  CANVAS ******************************
									 **/

									// Adds the svg canvas
									var svg = d3.select('#user' + user)
											.append("svg")
											.attr("width", width + margin.left + margin.right)
											.attr("height", height + margin.top + margin.bottom)
											.append("g")
											.attr("transform",
											"translate(" + margin.left + "," + margin.top + ")");

									// Scale the range of the data in minutes
                  // x.domain(stackData[0].map( function(d) { return d.x; } ) );
                  x.domain([0, maxX]);
									y.domain([0, d3.max(stackData, function(d) { 
                                      return d3.max(d, function(d) { 
                                                        return d.y0 + d.y; })
                                      })
                            ]);

                  // Create groups for each series, rects for each segment 
                  var groups = svg.selectAll("g.playback")
                    .data(stackData)
                    .enter().append("g")
                    .attr("class", "playback")
                    .style("fill", function(d, i) { return colors[i]; });

                  // Tooltip
                  var tip = d3.tip()
                    .attr('class', 'd3-tip')
                    .direction('se')
                    .offset([-10, 0])
                    .html(function (d, i) {
                      return arr = [
                        "Week: " + d.x,
                        "Hours: " + d.y.toFixed(1)
                      ].join('<br>');
                    });

                  var rect = groups.selectAll("rect")
                    .data(function(d) { return d; })
                    .enter()
                    .append("rect")
                    .attr("x", function(d) { return x(d.x) - ( width / maxX / 2 ) ; })
                    .attr("y", function(d) { return y(d.y0 + d.y); })
                    .attr("height", function(d) { return y(d.y0) - y(d.y0 + d.y); })
                    .attr("width", ( width / maxX ) -1 )
                    .on('mouseover', tip.show)
                    .on('mouseout', tip.hide);
                    ;

									/**
									 *  BUILD AXIS
									 **/
									// Add the X Axis
									svg.append("g")
											.attr("class", "x axis")
											.attr("transform", "translate(0," + height + ")")
											.call(xAxis);
									// Add the Y Axis
									svg.append("g")
											.attr("class", "y axis")
											.call(yAxis);
									// Axis label
									svg.append("text") // y
											.attr("text-anchor", "middle")
											.attr("transform", "translate(" + (-25) + "," + (height / 2) + ")rotate(-90)")  // 
											.text('watched (hours)');
									svg.append("text") // x
											.attr("text-anchor", "middle")
											.attr("transform", "translate(" + (width / 2) + "," + (height + margin.bottom - 3) + ")") 
                      .text('Calender Week');

                  // Title
                  svg.append("text")
                      .attr("x", (width / 2))
                      .attr("y", 0 - (margin.top / 2))
                      .attr("text-anchor", "middle")
                      .attr("class", "chart-title")
                      .text([
                          "User " + user ].join(''))
                      ;

                  // Draw legend
                  var legend = svg.selectAll(".legend")
                    .data(colors)
                    .enter().append("g")
                    .attr("class", "legend")
                    .attr("transform", function(d, i) { return "translate(30," + i * 19 + ")"; });
                  
                  legend.append("rect")
                    .attr("x", width - 18)
                    .attr("width", 18)
                    .attr("height", 18)
                    .style("fill", function(d, i) {return colors.slice().reverse()[i];});
                  
                  legend.append("text")
                    .attr("x", width + 5)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start")
                    .text(function(d, i) { 
                      switch (i) {
                        case 0: return "v1";
                        case 1: return "v2";
                        case 2: return "v3";
                        case 3: return "v4";
                        case 4: return "v5";
                      }
                    });

                    svg.call(tip);

                }
                res.metrics.pageload = t1 - t0;
                res.metrics.d3rendering = performance.now() - t1;
                res.metrics.browser = navigator.userAgent.split(' ')[navigator.userAgent.split(' ').length-1].split('/')[0];
                $.ajax({
                    type: "POST",
                    url: '/log/metrics',
                    data: res.metrics,
                    dataType: 'json'
                });
            });
        } // end load data
    </script>

    <% include footer %>