<html>
    <body>
        <div id="results"></div>

<script>
// Specify your actual API key here:
var API_KEY = 'AIzaSyDcXR1g2o9JNTjY8TBU0lGGIVgZrCFGO4g';

// Specify the URL you want PageSpeed results for here:
var URL_TO_GET_RESULTS_FOR = 'https://developers.google.com/speed/pagespeed/insights/';

var API_URL = 'https://www.googleapis.com/pagespeedonline/v2/runPagespeed?';
var CHART_API_URL = 'http://chart.apis.google.com/chart?';

// Object that will hold the callbacks that process results from the
// PageSpeed Insights API.
var callbacks = {}

// Invokes the PageSpeed Insights API. The response will contain
// JavaScript that invokes our callback with the PageSpeed results.
function runPagespeed(url) {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  var query = [
    'url=' + url,
    'callback=runPagespeedCallbacks',
    'prettyprint=true',
    'strategy=desktop',// mobile | desktop
    //'filter_third_party_resources=true'
    'key=' + API_KEY
  ].join('&');
  s.src = API_URL + query;
  document.head.insertBefore(s, null);
}

var parent = document.getElementById('results');
var t = document.createTextNode("path,score, totalRequestBytes");
var br = document.createElement("br");
parent.appendChild(t);

// Our JSONP callback. Checks for errors, then invokes our callback handlers.
function runPagespeedCallbacks(result) {
  if (result.error) {
    var errors = result.error.errors;
    for (var i = 0, len = errors.length; i < len; ++i) {
      if (errors[i].reason == 'badRequest' && API_KEY == 'yourAPIKey') {
        alert('Please specify your Google API key in the API_KEY variable.');
      } else {
        // NOTE: your real production app should use a better
        // mechanism than alert() to communicate the error to the user.
        alert(errors[i].message);
      }
    }
    return;
  }
  //alert(JSON.stringify(result))


out = result.id+','+result.ruleGroups.SPEED.score+','+result.pageStats.totalRequestBytes;
t = document.createTextNode(out);//JSON.stringify(, null, "\t") );

parent.appendChild(br);
parent.appendChild(t);

/*  
  // Dispatch to each function on the callbacks object.
  for (var fn in callbacks) {
    var f = callbacks[fn];
    if (typeof f == 'function') {
      callbacks[fn](result);
    }
  }*/
}

// Invoke the callback that fetches results. Async here so we're sure
// to discover any callbacks registered below, but this can be
// synchronous in your code.

var 
    server = 'http://127.0.0.1:3000',
    paths = [
    '/chart/playback-peaks#testing=true,scope=total',
    '/chart/playback-peaks#testing=true,scope=user',
    '/chart/playback-peaks#testing=true,scope=user-relative',
    '/chart/playback-peaks#testing=true,scope=group',
    //'/chart/playback-peaks',
    '/chart/rewatching',
    '/chart/playback-interactions/group/all/user/all',
    '/chart/forward-backward',
    '/chart/cordtra',
    '/chart/groups'
];
for(var i = 0; i < paths.length; i++){
    //runPagespeed(server+paths[i]);
}
runPagespeed('http://www.nise81.com/')
//setTimeout(runPagespeed, 0);
</script>


</body>
</html>